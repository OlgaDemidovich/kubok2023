import os
import time

import pigpio


def setup_gpio():
    """ Эта функция инициализирует объекты для работы с GPIO.
        GPIO - гребёнка пинов, на которые Raspberry Pi выдаёт электрические сигналы.
        К GPIO подключают драйвер двигателя и сервопривод
    """
    os.system("sudo pigpiod")  # запускаем программу-демон для управления GPIO
    time.sleep(1)  # ждём секунду, пока выполнится предыдущая команда
    ESC = 17  # номер пина для подключения драйвера двигателя
    STEER = 18  # номер пина для подключения сервопривода
    pi = pigpio.pi()  # объект для управления GPIO
    pi.set_servo_pulsewidth(ESC, 0)  # отключаем сигналы на пине драйвера двигателя
    pi.set_servo_pulsewidth(STEER, 0)  # отключаем сигналы на пине сервопривода
    time.sleep(1)
    return (pi, ESC, STEER)


# отключаем сигналы на пине драйвера двигателя
def control(pi, ESC, speed, STEER, angle):
    """ Функция для одновременного задания скорости и угла поворота колёс сервопривода
    """
    pi.set_servo_pulsewidth(ESC, speed)  # задаём скорость для драйвера двигателя
    pi.set_servo_pulsewidth(STEER, int(11.1 * angle + 500))  # устанавливаем угол поворота колёс


pi, ESC, STEER = setup_gpio()  # подготовили GPIO для работы с ними

""" Напоминаем, что первый сигнал, который получит драйвер двигателя после включения,
    будет использоваться в качестве сигнала STOP.
    Нам нужно, чтобы первый сигнал, полученный драйвером двигателя, был с длительностью 1500.
"""

time.sleep(2)
control(pi, ESC, 1500, STEER, 90)  # 1500 - стоп, 90 - прямо
print("Start")  # в этот момент включаем драйвер двигателя
time.sleep(1)  # ждём, чтобы драйвер двигателя уловил сигнал и запомнил его как STOP

control(pi, ESC, 1565, STEER, 70)  # 1580 - вперёд, 90 - прямо
time.sleep(6)
control(pi, ESC, 1565, STEER, 110)  # 1580 - вперёд, 90 - прямо
time.sleep(5)
# control(pi, ESC, 1425, STEER, 110)  # 1580 - вперёд, 90 - прямо
# time.sleep(3)
# control(pi, ESC, 1560, STEER, 90)  # 1580 - вперёд, 90 - прямо
# time.sleep(3)
control(pi, ESC, 1500, STEER, 90)  # 1500 - стоп, 90 - прямо
# последний сигнал подаётся даже после завершения этой программы,
# за это отвечает программа-демон, которую мы запустили в setup_gpio.
